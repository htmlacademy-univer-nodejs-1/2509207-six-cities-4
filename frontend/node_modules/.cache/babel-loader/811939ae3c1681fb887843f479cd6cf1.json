{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { Token } from './utils';\nconst BACKEND_URL = 'http://localhost:3000';\nconst REQUEST_TIMEOUT = 5000;\nexport const createAPI = () => {\n  const api = axios.create({\n    baseURL: BACKEND_URL,\n    timeout: REQUEST_TIMEOUT\n  });\n  api.interceptors.request.use(config => {\n    const token = Token.get();\n\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return config;\n  });\n  api.interceptors.response.use(response => response, error => {\n    var _data$message2, _data$error;\n\n    toast.dismiss();\n    const resp = error.response;\n\n    if (resp) {\n      const {\n        status,\n        data\n      } = resp;\n\n      switch (status) {\n        case HttpCode.BAD_REQUEST:\n          if (Array.isArray(data.details)) {\n            data.details.forEach(field => field.messages.forEach(msg => toast.info(msg)));\n          } else {\n            var _data$message;\n\n            toast.info((_data$message = data.message) !== null && _data$message !== void 0 ? _data$message : 'Bad request');\n          }\n\n          break;\n\n        case HttpCode.UNAUTHORIZED:\n        case HttpCode.NOT_FOUND:\n        case HttpCode.CONFLICT:\n          toast.info((_data$message2 = data.message) !== null && _data$message2 !== void 0 ? _data$message2 : error.message);\n          break;\n\n        default:\n          toast.warn((_data$error = data.error) !== null && _data$error !== void 0 ? _data$error : error.message);\n      }\n    } else {\n      // например, сетевая ошибка\n      toast.error(error.message);\n    }\n\n    return Promise.reject(error);\n  });\n  return api;\n};","map":{"version":3,"names":["axios","toast","Token","BACKEND_URL","REQUEST_TIMEOUT","createAPI","api","create","baseURL","timeout","interceptors","request","use","config","token","get","headers","response","error","dismiss","resp","status","data","HttpCode","BAD_REQUEST","Array","isArray","details","forEach","field","messages","msg","info","message","UNAUTHORIZED","NOT_FOUND","CONFLICT","warn","Promise","reject"],"sources":["/Users/vovotata/nodejs/2509207-six-cities-4/frontend/src/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosError } from 'axios';\nimport { toast } from 'react-toastify';\nimport { ValidationErrorField } from './types/error'\nimport { Token } from './utils';\n\nconst BACKEND_URL = 'http://localhost:3000';\nconst REQUEST_TIMEOUT = 5000;\n\nexport const createAPI = (): AxiosInstance => {\n  const api = axios.create({\n    baseURL: BACKEND_URL,\n    timeout: REQUEST_TIMEOUT,\n  });\n\n  api.interceptors.request.use(\n    (config: AxiosRequestConfig) => {\n      const token = Token.get();\n\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n\n      return config;\n    }\n  );\n\n    api.interceptors.response.use(\n        response => response,\n        (error: AxiosError) => {\n          toast.dismiss();\n          const resp = error.response;\n          if (resp) {\n            const { status, data } = resp as {\n              status: number;\n              data: { message?: string; details?: ValidationErrorField[]; error?: string };\n            };\n            switch (status) {\n              case HttpCode.BAD_REQUEST:\n                if (Array.isArray(data.details)) {\n                  data.details.forEach((field) =>\n                    field.messages.forEach(msg => toast.info(msg))\n                  );\n                } else {\n                  toast.info(data.message ?? 'Bad request');\n                }\n                break;\n              case HttpCode.UNAUTHORIZED:\n              case HttpCode.NOT_FOUND:\n              case HttpCode.CONFLICT:\n                toast.info(data.message ?? error.message);\n                break;\n              default:\n                toast.warn(data.error ?? error.message);\n            }\n          } else {\n            // например, сетевая ошибка\n            toast.error(error.message);\n          }\n          return Promise.reject(error);\n        }\n      );\n\n  return api;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAqE,OAArE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAASC,KAAT,QAAsB,SAAtB;AAEA,MAAMC,WAAW,GAAG,uBAApB;AACA,MAAMC,eAAe,GAAG,IAAxB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAqB;EAC5C,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAa;IACvBC,OAAO,EAAEL,WADc;IAEvBM,OAAO,EAAEL;EAFc,CAAb,CAAZ;EAKAE,GAAG,CAACI,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CACGC,MAAD,IAAgC;IAC9B,MAAMC,KAAK,GAAGZ,KAAK,CAACa,GAAN,EAAd;;IAEA,IAAID,KAAJ,EAAW;MACTD,MAAM,CAACG,OAAP,CAAe,eAAf,IAAmC,UAASF,KAAM,EAAlD;IACD;;IAED,OAAOD,MAAP;EACD,CATH;EAYEP,GAAG,CAACI,YAAJ,CAAiBO,QAAjB,CAA0BL,GAA1B,CACIK,QAAQ,IAAIA,QADhB,EAEKC,KAAD,IAAuB;IAAA;;IACrBjB,KAAK,CAACkB,OAAN;IACA,MAAMC,IAAI,GAAGF,KAAK,CAACD,QAAnB;;IACA,IAAIG,IAAJ,EAAU;MACR,MAAM;QAAEC,MAAF;QAAUC;MAAV,IAAmBF,IAAzB;;MAIA,QAAQC,MAAR;QACE,KAAKE,QAAQ,CAACC,WAAd;UACE,IAAIC,KAAK,CAACC,OAAN,CAAcJ,IAAI,CAACK,OAAnB,CAAJ,EAAiC;YAC/BL,IAAI,CAACK,OAAL,CAAaC,OAAb,CAAsBC,KAAD,IACnBA,KAAK,CAACC,QAAN,CAAeF,OAAf,CAAuBG,GAAG,IAAI9B,KAAK,CAAC+B,IAAN,CAAWD,GAAX,CAA9B,CADF;UAGD,CAJD,MAIO;YAAA;;YACL9B,KAAK,CAAC+B,IAAN,kBAAWV,IAAI,CAACW,OAAhB,yDAA2B,aAA3B;UACD;;UACD;;QACF,KAAKV,QAAQ,CAACW,YAAd;QACA,KAAKX,QAAQ,CAACY,SAAd;QACA,KAAKZ,QAAQ,CAACa,QAAd;UACEnC,KAAK,CAAC+B,IAAN,mBAAWV,IAAI,CAACW,OAAhB,2DAA2Bf,KAAK,CAACe,OAAjC;UACA;;QACF;UACEhC,KAAK,CAACoC,IAAN,gBAAWf,IAAI,CAACJ,KAAhB,qDAAyBA,KAAK,CAACe,OAA/B;MAhBJ;IAkBD,CAvBD,MAuBO;MACL;MACAhC,KAAK,CAACiB,KAAN,CAAYA,KAAK,CAACe,OAAlB;IACD;;IACD,OAAOK,OAAO,CAACC,MAAR,CAAerB,KAAf,CAAP;EACD,CAjCL;EAoCF,OAAOZ,GAAP;AACD,CAvDM"},"metadata":{},"sourceType":"module"}