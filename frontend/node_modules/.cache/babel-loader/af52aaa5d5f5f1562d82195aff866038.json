{"ast":null,"code":"var _jsxFileName = \"/Users/vovotata/nodejs/2509207-six-cities-4/frontend/src/components/private-route/private-route.tsx\",\n    _s = $RefreshSig$();\n\nimport { Navigate } from 'react-router-dom';\nimport { AuthorizationStatus } from '../../const';\nimport { useAppSelector } from '../../hooks';\nimport { getAuthorizationStatus } from '../../store/user-process/selectors';\nimport Spinner from '../spinner/spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = _ref => {\n  _s();\n\n  let {\n    children,\n    restrictedFor,\n    redirectTo\n  } = _ref;\n  const authorizationStatus = useAppSelector(getAuthorizationStatus);\n\n  if (authorizationStatus === AuthorizationStatus.Unknown) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  return authorizationStatus !== restrictedFor ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: redirectTo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrivateRoute, \"FPRN+yLRAVHu33iHr+G2mal5QMk=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Navigate","AuthorizationStatus","useAppSelector","getAuthorizationStatus","Spinner","PrivateRoute","children","restrictedFor","redirectTo","authorizationStatus","Unknown"],"sources":["/Users/vovotata/nodejs/2509207-six-cities-4/frontend/src/components/private-route/private-route.tsx"],"sourcesContent":["import { Navigate } from 'react-router-dom';\nimport { AppRoute, AuthorizationStatus } from '../../const';\nimport { useAppSelector } from '../../hooks';\nimport { getAuthorizationStatus } from '../../store/user-process/selectors';\nimport Spinner from '../spinner/spinner';\n\ntype PrivateRouteProps = {\n  restrictedFor: AuthorizationStatus;\n  redirectTo: AppRoute;\n  children: JSX.Element;\n}\n\nconst PrivateRoute = ({ children, restrictedFor, redirectTo }: PrivateRouteProps): JSX.Element => {\n  const authorizationStatus = useAppSelector(getAuthorizationStatus);\n\n  if (authorizationStatus === AuthorizationStatus.Unknown) {\n    return <Spinner />;\n  }\n\n  return (\n    authorizationStatus !== restrictedFor\n      ? children\n      : <Navigate to={redirectTo} />\n  );\n};\n\nexport default PrivateRoute;\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAAmBC,mBAAnB,QAA8C,aAA9C;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAQA,MAAMC,YAAY,GAAG,QAA6E;EAAA;;EAAA,IAA5E;IAAEC,QAAF;IAAYC,aAAZ;IAA2BC;EAA3B,CAA4E;EAChG,MAAMC,mBAAmB,GAAGP,cAAc,CAACC,sBAAD,CAA1C;;EAEA,IAAIM,mBAAmB,KAAKR,mBAAmB,CAACS,OAAhD,EAAyD;IACvD,oBAAO,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,OACED,mBAAmB,KAAKF,aAAxB,GACID,QADJ,gBAEI,QAAC,QAAD;IAAU,EAAE,EAAEE;EAAd;IAAA;IAAA;IAAA;EAAA,QAHN;AAKD,CAZD;;GAAMH,Y;UACwBH,c;;;KADxBG,Y;AAcN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}